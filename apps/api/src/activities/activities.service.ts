// src/activity/activity.service.ts
import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { CreateActivityDto } from './dtos/create-activity.dto';
import { UpdateActivityDto } from './dtos/update-activity.dto';

@Injectable()
export class ActivityService {
  constructor(private readonly prisma: PrismaService) {}

  async create(createActivityDto: CreateActivityDto, creatorId: string) {
    return this.prisma.activity.create({
      data: {
        title: createActivityDto.title,
        level: createActivityDto.level,  
        description: createActivityDto.description,
        type: createActivityDto.type,
        options: createActivityDto.options,
        correctAnswer: createActivityDto.correctAnswer,
        mediaUrl: createActivityDto.mediaUrl,
        createdBy: creatorId,  
        autoGenerated: createActivityDto.autoGenerated ?? false,
        groupId: createActivityDto.groupId,
      },
    });
  }

  async findAll() {
    return this.prisma.activity.findMany({
      orderBy: { createdAt: 'desc' },
    });
  }

  async findOne(id: string) {
    const activity = await this.prisma.activity.findUnique({
      where: { id },
    });
    if (!activity) {
      throw new NotFoundException(`Atividade com id ${id} n√£o encontrada.`);
    }
    return activity;
  }

  async update(id: string, updateActivityDto: UpdateActivityDto) {
    await this.findOne(id);
    return this.prisma.activity.update({
      where: { id },
      data: updateActivityDto,
    });
  }

  async remove(id: string) {
    await this.findOne(id);
    return this.prisma.activity.delete({
      where: { id },
    });
  }
}
