// Prisma Schema for the Linfox Education Platform
// -----------------------------------------------
// Este schema modela uma plataforma de gestão educacional
// voltada para professores autônomos e pequenas escolas.


// ------------------------
// Datasource & Generator
// ------------------------
datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DATABASE_URL")   
}

generator client {
  provider = "prisma-client-js"
}



// ------------------------
// ENUMS
// ------------------------

enum Role {
  STUDENT   // Usuário do tipo estudante
  TEACHER   // Usuário do tipo professor
  ADMIN     // Administrador da plataforma
}

enum Level {
  BASIC
  LOWER_INTERMEDIATE
  INTERMEDIATE
  UPPER_INTERMEDIATE
  ADVANCED
}

enum MessageType {
  CLASS_LINK          // Link para aula
  PAYMENT_REMINDER    // Lembrete de pagamento
  BIRTHDAY_GREETING   // Parabéns de aniversário
  ACTIVITY_FOLLOW_UP  // Mensagem após atividade
}

enum Sender {
  STUDENT
  AI
}

/// Utilizado tanto para o plano do professor com nós quanto para os planos dos alunos com o professor
enum RecurrenceType {
  MONTHLY
  TRIMESTRAL
  SEMESTRAL
  ANNUAL
  COMPLETE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum ActivityType {
  MULTIPLE_CHOICE
  WRITTEN
  AUDIO
  PHOTO
}

/// Faixas para análise comercial e realizar a venda
enum StudentRange {
  UP_TO_3
  FROM_4_TO_10
  FROM_11_TO_20
  FROM_21_TO_50
  FROM_51_TO_100
  MORE_THAN_100
}

enum TeacherRange {
  ONLY_ME
  UP_TO_3
  FROM_4_TO_5
  FROM_6_TO_10
  FROM_11_TO_20
}



// ------------------------
// MODELS
// ------------------------

/// Representa os planos que há com faixas de preço personalizadas por quantidade de alunos/professores
model CompanyPlanTier {
  id            String        @id @default(uuid())
  planId        String
  plan          CompanyPlan   @relation(fields: [planId], references: [id])
  minStudents   Int           // faixa mínima de alunos
  maxStudents   Int           // faixa máxima de alunos
  minTeachers   Int           // faixa mínima de professores
  maxTeachers   Int           // faixa máxima de professores
  price         Float         // valor cobrado mensal
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

/// Representa uma instituição de ensino ou empresa que centraliza professores e alunos.
model Company {
  id                  String         @id @default(uuid())
  name                String
  teachers            User[]         @relation("CompanyTeachers")
  students            User[]         @relation("CompanyStudents")
  planId              String?
  plan                CompanyPlan?   @relation("CompanyToPlan", fields: [planId], references: [id])

  // Informações para contato comercial
  adminEmail          String?
  adminPhone          String?

  // Faixas para análise comercial
  studentRange        StudentRange?
  teacherRange        TeacherRange?

  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  deletedAt           DateTime?
}

/// Plano de assinatura da empresa com funcionalidades e preços definidos.
model CompanyPlan {
  id        String                   @id @default(uuid())
  name      String
  price     Float
  features  Json?
  isActive  Boolean                  @default(true)
  companies Company[]                @relation("CompanyToPlan")

  // relação com faixas de preço
  tiers     CompanyPlanTier[]  

  deletedAt DateTime?
}

/// Representa um usuário do sistema, podendo ser estudante, professor ou administrador.
model User {
  id                  String                   @id @default(uuid())
  companyId           String?
  company             Company?                 @relation("CompanyTeachers", fields: [companyId], references: [id]) // Para professores
  companyAsStudentId  String?
  companyAsStudent    Company?                 @relation("CompanyStudents", fields: [companyAsStudentId], references: [id]) // Para alunos  
  isCompanyCreator    Boolean                  @default(false)
  name                String
  email               String                   @unique
  password            String
  role                Role
  level               Level?
  groupId             String?
  teacherGroups       Group[]                  @relation("TeacherGroups")
  studentGroups       Group[]                  @relation("StudentGroups")
  studentPayments     Payment[]                @relation("StudentPayments")
  teacherPayments     Payment[]                @relation("TeacherPayments")
  teacherPaymentPlans PaymentPlan[]            @relation("TeacherPaymentPlans")
  taskAttempts        TaskAttempt[]
  chatInsights        ChatInsight[]
  conversations       Conversation[]
  chatMessages        ChatMessage[]            @relation("UserChatMessages")
  activities          Activity[]
  videos              Video[]
  messageConfigs      AutomatedMessageConfig[]
  playlists           Playlist[]
  refreshTokens       RefreshToken[]           @relation("UserRefreshTokens")
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  deletedAt           DateTime?

  @@index([companyId, role])
}

/// Representa uma turma, com um professor responsável e diversos alunos.
model Group {
  id           String            @id @default(uuid())
  name         String
  description  String?
  level        Level
  teacherId    String
  teacher      User              @relation("TeacherGroups", fields: [teacherId], references: [id])
  invitations  GroupInvitation[] @relation("GroupInvitations")
  students     User[]            @relation("StudentGroups")
  activities   Activity[]
  lessonPlans  LessonPlan[]      // Planejamentos de aula gerados com base em mensagens
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  deletedAt    DateTime?

  @@index([teacherId])
}

/// Convite para entrada em uma turma, via link ou código gerado.
model GroupInvitation {
  id         String    @id @default(uuid())
  groupId    String
  group      Group     @relation("GroupInvitations", fields: [groupId], references: [id])
  inviteCode String    @unique
  expiresAt  DateTime?
  acceptedAt DateTime?
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
}

/// Representa um pagamento feito de um aluno a um professor, com status e recorrência.
model Payment {
  id          String       @id @default(uuid())
  studentId   String
  teacherId   String
  planId      String?
  plan        PaymentPlan? @relation(fields: [planId], references: [id])
  amount      Float
  dueDate     DateTime
  paymentDate DateTime?
  status      PaymentStatus
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  student     User         @relation("StudentPayments", fields: [studentId], references: [id])
  teacher     User         @relation("TeacherPayments", fields: [teacherId], references: [id])

  @@index([studentId])
  @@index([teacherId])
}

/// Define planos de pagamento para os professores que recebem mensalidade.
model PaymentPlan {
  id         String         @id @default(uuid())
  teacherId  String
  teacher    User           @relation("TeacherPaymentPlans", fields: [teacherId], references: [id])
  recurrence RecurrenceType
  amount     Float
  startDate  DateTime
  isActive   Boolean        @default(true)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  deletedAt  DateTime?
  payments   Payment[]
}

/// Planejamento de aula gerado automaticamente para uma turma específica.
model LessonPlan {
  id        String   @id @default(uuid())
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id])
  content   String
  createdAt DateTime @default(now())
  deletedAt DateTime?
}

/// Atividades que alunos devem realizar (exercícios).
model Activity {
  userId        String?
  user          User?         @relation(fields: [userId], references: [id])
  groupId       String?
  group         Group?        @relation(fields: [groupId], references: [id])
  id            String        @id @default(uuid())
  title         String
  level         Level
  description   String?
  type          ActivityType
  options       Json?
  correctAnswer String?
  mediaUrl      String?
  createdBy     String
  autoGenerated Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  taskAttempts  TaskAttempt[]
}

/// Registro das tentativas dos alunos nas atividades.
model TaskAttempt {
  id               String   @id @default(uuid())
  activityId       String
  activity         Activity @relation(fields: [activityId], references: [id])
  studentId        String
  student          User     @relation(fields: [studentId], references: [id])
  correctAnswers   Int
  incorrectAnswers Int
  score            Float?
  startedAt        DateTime @default(now())
  finishedAt       DateTime
  deletedAt        DateTime?
}

/// Vídeo enviado por professores, categorizado por nível.
model Video {
  id          String    @id @default(uuid())
  title       String
  url         String
  description String?
  playlistId  String?
  playlist    Playlist? @relation(fields: [playlistId], references: [id])
  uploadedAt  DateTime  @default(now())
  teacherId   String
  teacher     User      @relation(fields: [teacherId], references: [id])
  level       Level
  deletedAt   DateTime?
}

/// Playlist de vídeos organizados por nível.
model Playlist {
  id          String   @id @default(uuid())
  title       String
  description String?
  teacherId   String
  teacher     User     @relation(fields: [teacherId], references: [id])
  videos      Video[]
  level       Level
  createdAt   DateTime @default(now())
  deletedAt   DateTime?
}

/// Configuração de mensagens automáticas por parte do professor.
model AutomatedMessageConfig {
  id          String      @id @default(uuid())
  teacherId   String
  teacher     User        @relation(fields: [teacherId], references: [id])
  messageType MessageType
  template    String
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  deletedAt   DateTime?
}

/// Token de sessão para manter o login do usuário.
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation("UserRefreshTokens", fields: [userId], references: [id])
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  deletedAt DateTime?
}

/// Conversas de IA com o aluno para geração de insights e planejamentos.
model Conversation {
  id          String        @id @default(uuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  messages    ChatMessage[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ChatInsight ChatInsight[]
  deletedAt   DateTime?
}

/// Mensagens trocadas entre aluno e IA (usadas para gerar planos).
model ChatMessage {
  id             String       @id @default(uuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  userId         String
  user           User         @relation("UserChatMessages", fields: [userId], references: [id])
  content        String
  sender         Sender
  createdAt      DateTime     @default(now())
  usedInPlanning Boolean      @default(false)
  deletedAt      DateTime?

  @@index([userId])
}

/// Insights gerados com base nas conversas com IA.
model ChatInsight {
  id             String       @id @default(uuid())
  conversationId String
  studentId      String
  insight        String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  student        User         @relation(fields: [studentId], references: [id])
  deletedAt      DateTime?
}
